import * as React from "react";
import { RefObject } from "react";
import { VisualElementAnimationControls } from "../../animation/VisualElementAnimationControls";
import { VariantLabels, MotionProps } from "../types";
import { VisualElement } from "../../render/VisualElement";
export interface MotionContextProps {
    visualElement?: VisualElement<any>;
    controls?: VisualElementAnimationControls;
    initial?: false | VariantLabels;
    animate?: VariantLabels;
    static?: boolean;
    hasMounted?: RefObject<boolean>;
    presenceId?: number;
    isReducedMotion?: boolean | undefined;
}
/**
 * @internal
 */
export declare const MotionContext: React.Context<MotionContextProps>;
/**
 * Set up the context for children motion components.
 *
 * We also use this opportunity to apply `initial` values
 */
export declare const useMotionContext: (parentContext: MotionContextProps, controls: VisualElementAnimationControls, visualElement: VisualElement<any>, isStatic: boolean | undefined, { initial, animate, variants, whileTap, whileHover, layoutId }: MotionProps) => MotionContextProps;
